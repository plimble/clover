package mocks

import mock "github.com/stretchr/testify/mock"
import oauth2 "github.com/plimble/clover/oauth2"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetAccessToken provides a mock function with given fields: accessToken
func (_m *Storage) GetAccessToken(accessToken string) (*oauth2.AccessToken, error) {
	ret := _m.Called(accessToken)

	var r0 *oauth2.AccessToken
	if rf, ok := ret.Get(0).(func(string) *oauth2.AccessToken); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.AccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizeCode provides a mock function with given fields: code
func (_m *Storage) GetAuthorizeCode(code string) (*oauth2.AuthorizeCode, error) {
	ret := _m.Called(code)

	var r0 *oauth2.AuthorizeCode
	if rf, ok := ret.Get(0).(func(string) *oauth2.AuthorizeCode); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.AuthorizeCode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields: id
func (_m *Storage) GetClient(id string) (*oauth2.Client, error) {
	ret := _m.Called(id)

	var r0 *oauth2.Client
	if rf, ok := ret.Get(0).(func(string) *oauth2.Client); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientWithSecret provides a mock function with given fields: id, secret
func (_m *Storage) GetClientWithSecret(id string, secret string) (*oauth2.Client, error) {
	ret := _m.Called(id, secret)

	var r0 *oauth2.Client
	if rf, ok := ret.Get(0).(func(string, string) *oauth2.Client); ok {
		r0 = rf(id, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshToken provides a mock function with given fields: refreshToken
func (_m *Storage) GetRefreshToken(refreshToken string) (*oauth2.RefreshToken, error) {
	ret := _m.Called(refreshToken)

	var r0 *oauth2.RefreshToken
	if rf, ok := ret.Get(0).(func(string) *oauth2.RefreshToken); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.RefreshToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAvailableScope provides a mock function with given fields: scopes
func (_m *Storage) IsAvailableScope(scopes []string) (bool, error) {
	ret := _m.Called(scopes)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string) bool); ok {
		r0 = rf(scopes)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeAccessToken provides a mock function with given fields: accessToken
func (_m *Storage) RevokeAccessToken(accessToken string) error {
	ret := _m.Called(accessToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeRefreshToken provides a mock function with given fields: refreshToken
func (_m *Storage) RevokeRefreshToken(refreshToken string) error {
	ret := _m.Called(refreshToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAccessToken provides a mock function with given fields: accessToken
func (_m *Storage) SaveAccessToken(accessToken *oauth2.AccessToken) error {
	ret := _m.Called(accessToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(*oauth2.AccessToken) error); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAuthorizeCode provides a mock function with given fields: authCode
func (_m *Storage) SaveAuthorizeCode(authCode *oauth2.AuthorizeCode) error {
	ret := _m.Called(authCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(*oauth2.AuthorizeCode) error); ok {
		r0 = rf(authCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRefreshToken provides a mock function with given fields: refreshToken
func (_m *Storage) SaveRefreshToken(refreshToken *oauth2.RefreshToken) error {
	ret := _m.Called(refreshToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(*oauth2.RefreshToken) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
