package mocks

import clover "github.com/plimble/clover"
import mock "github.com/stretchr/testify/mock"

// TokenStorage is an autogenerated mock type for the TokenStorage type
type TokenStorage struct {
	mock.Mock
}

// DeleteAccessToken provides a mock function with given fields: token
func (_m *TokenStorage) DeleteAccessToken(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAuthorizeCode provides a mock function with given fields: code
func (_m *TokenStorage) DeleteAuthorizeCode(code string) error {
	ret := _m.Called(code)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRefreshToken provides a mock function with given fields: token
func (_m *TokenStorage) DeleteRefreshToken(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccessToken provides a mock function with given fields: token
func (_m *TokenStorage) GetAccessToken(token string) (*clover.AccessToken, error) {
	ret := _m.Called(token)

	var r0 *clover.AccessToken
	if rf, ok := ret.Get(0).(func(string) *clover.AccessToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clover.AccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizeCode provides a mock function with given fields: code
func (_m *TokenStorage) GetAuthorizeCode(code string) (*clover.AuthorizeCode, error) {
	ret := _m.Called(code)

	var r0 *clover.AuthorizeCode
	if rf, ok := ret.Get(0).(func(string) *clover.AuthorizeCode); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clover.AuthorizeCode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshToken provides a mock function with given fields: token
func (_m *TokenStorage) GetRefreshToken(token string) (*clover.RefreshToken, error) {
	ret := _m.Called(token)

	var r0 *clover.RefreshToken
	if rf, ok := ret.Get(0).(func(string) *clover.RefreshToken); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clover.RefreshToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAccessToken provides a mock function with given fields: accessToken
func (_m *TokenStorage) SaveAccessToken(accessToken *clover.AccessToken) error {
	ret := _m.Called(accessToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(*clover.AccessToken) error); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAuthorizeCode provides a mock function with given fields: authCode
func (_m *TokenStorage) SaveAuthorizeCode(authCode *clover.AuthorizeCode) error {
	ret := _m.Called(authCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(*clover.AuthorizeCode) error); ok {
		r0 = rf(authCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRefreshToken provides a mock function with given fields: refreshToken
func (_m *TokenStorage) SaveRefreshToken(refreshToken *clover.RefreshToken) error {
	ret := _m.Called(refreshToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(*clover.RefreshToken) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
