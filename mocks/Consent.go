package mocks

import clover "github.com/plimble/clover"
import mock "github.com/stretchr/testify/mock"
import url "net/url"

// Consent is an autogenerated mock type for the Consent type
type Consent struct {
	mock.Mock
}

// UrlWithChallenge provides a mock function with given fields: clientID, scope
func (_m *Consent) UrlWithChallenge(clientID string, scope string) (*url.URL, string, error) {
	ret := _m.Called(clientID, scope)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(string, string) *url.URL); ok {
		r0 = rf(clientID, scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(clientID, scope)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(clientID, scope)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateChallenge provides a mock function with given fields: challenge
func (_m *Consent) ValidateChallenge(challenge string) (*clover.Challenge, error) {
	ret := _m.Called(challenge)

	var r0 *clover.Challenge
	if rf, ok := ret.Get(0).(func(string) *clover.Challenge); ok {
		r0 = rf(challenge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clover.Challenge)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(challenge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
