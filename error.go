package clover

var (
	errParseURI                 = newRespErr(400, "invalid_uri", "Invalid parse uri")
	errOnlyOneTokenMethod       = newRespErr(400, "invalid_request", "Only one method may be used to authenticate at a time (Auth header, GET or POST)")
	errNoTokenInRequest         = newRespErr(400, "invalid_request", "No access token in request")
	errMalFormedHeader          = newRespErr(400, "invalid_request", "Malformed auth header")
	errCredentailsRequired      = newRespErr(400, "invalid_client", "Client credentials are required")
	errCredentailsNotInBody     = newRespErr(400, "invalid_client", "Client credentials were not found in the body")
	errInvalidAuthMSG           = newRespErr(400, "invalid_client", "Invalid authorization message")
	errInvalidAuthHeader        = newRespErr(400, "invalid_client", "Invalid authorization header")
	errUserDeniedAccess         = newRespErr(403, "access_denied", "The user denied access to your application")
	errNoClientID               = newRespErr(400, "invalid_client", "No client id supplied")
	errInvalidClientID          = newRespErr(400, "invalid_client", "The client id supplied is invalid")
	errStateRequired            = newRespErr(400, "invalid_request", "The state parameter is required")
	errRedirectMismatch         = newRespErr(400, "redirect_uri_mismatch", "The redirect URI provided is missing or does not match")
	errNoRedirectURI            = newRespErr(400, "invalid_uri", "No redirect URI was supplied or stored")
	errInvalidRespType          = newRespErr(400, "invalid_request", "Invalid or missing response type")
	errUnSupportedImplicit      = newRespErr(400, "unsupported_response_type", "implicit grant type not supported")
	errUnAuthorizedGrant        = newRespErr(400, "unauthorized_client", "The grant type is unauthorized for this client_id")
	errCodeUnSupportedGrant     = newRespErr(400, "unsupported_response_type", "authorization code grant type not supported")
	errUnSupportedScope         = newRespErr(400, "invalid_scope", "An unsupported scope was requested")
	errNoScope                  = newRespErr(400, "invalid_client", "This application requires you specify a scope parameter")
	errMustBePostMetthod        = newRespErr(400, "invalid_request", "The request method must be POST when requesting an access token")
	errGrantTypeRequired        = newRespErr(400, "invalid_request", "The grant type was not specified in the request")
	errUnSupportedGrantType     = newRespErr(400, "unsupported_grant_type", "Grant type not supported")
	errInvalidScopeRequest      = newRespErr(400, "invalid_scope", "The scope requested is invalid for this request")
	errUsernamePasswordRequired = newRespErr(400, "invalid_request", "Username and password are required")
	errInvalidClientCredentail  = newRespErr(400, "invalid_grant", "Invalid Client credential")
	errRefreshTokenRequired     = newRespErr(400, "invalid_request", "Missing parameter: refresh_token is required")
	errRefreshTokenExpired      = newRespErr(400, "invalid_grant", "Refresh token has expired")
	errInvalidRefreshToken      = newRespErr(400, "invalid_grant", "Invalid refresh token")
	errCodeRequired             = newRespErr(400, "invalid_request", "Missing parameter: code is required")
	errAuthCodeNotExist         = newRespErr(400, "invalid_grant", "Authorization code doesn't exist or is invalid for the client")
	errAuthCodeExpired          = newRespErr(400, "invalid_grant", "The authorization code has expired")
	errAssetionRequired         = newRespErr(400, "invalid_request", "Missing parameter: assertion is required")
	errInvalidAccessToken       = newRespErr(400, "invalid_token", "The access token provided is invalid")
	errAccessTokenExpired       = newRespErr(400, "expired_token", "The access token provided has expired")
	errInsufficientScope        = newRespErr(403, "insufficient_scope", "The request requires higher privileges than provided by the access token")
	errInvalidUsernamePAssword  = newRespErr(403, "invalid_grant", "Invalid username and password combination")
)

func errInternal(desc string) *Response {
	return newRespErr(500, "internal", desc)
}
